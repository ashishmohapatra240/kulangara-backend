// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  email           String    @unique
  password        String
  firstName       String
  lastName        String
  phone           String?
  avatar          String?
  role            Role      @default(CUSTOMER)
  isActive        Boolean   @default(true)
  isVerified      Boolean   @default(false)
  emailVerifiedAt DateTime?
  lastLoginAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  wishlist      Wishlist[]
  cart          Cart?
  refreshTokens RefreshToken[]
  adminProfile  AdminProfile?

  @@map("users")
}

model AdminProfile {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  permissions String[]
  approvedBy  String?   @db.ObjectId
  approvedAt  DateTime?
  department  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin_profiles")
}

enum Role {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
  DELIVERY_PARTNER
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

model Address {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  firstName String
  lastName  String
  address   String
  apartment String?
  city      String
  state     String
  pincode   String
  phone     String
  isDefault Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("addresses")
}

model Order {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  addressId String  @db.ObjectId
  address   Address @relation(fields: [addressId], references: [id])

  @@map("orders")
}

model Review {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model Wishlist {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@map("wishlists")
}

model Cart {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@map("carts")
}

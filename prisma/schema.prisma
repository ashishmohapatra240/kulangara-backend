// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  email           String    @unique
  password        String
  firstName       String
  lastName        String
  phone           String?
  avatar          String?
  role            Role      @default(CUSTOMER)
  isActive        Boolean   @default(true)
  isVerified      Boolean   @default(false)
  emailVerifiedAt DateTime?
  lastLoginAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  wishlist      Wishlist[]
  cart          Cart?
  refreshTokens RefreshToken[]
  adminProfile  AdminProfile?

  @@map("users")
}

model AdminProfile {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  permissions String[]
  approvedBy  String?   @db.ObjectId
  approvedAt  DateTime?
  department  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin_profiles")
}

enum Role {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
  DELIVERY_PARTNER
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

model Address {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  firstName String
  lastName  String
  address   String
  apartment String?
  city      String
  state     String
  pincode   String
  phone     String
  isDefault Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("addresses")
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  addressId String      @db.ObjectId
  address   Address     @relation(fields: [addressId], references: [id])
  OrderItem OrderItem[]

  @@map("orders")
}

model Review {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  rating     Int // 1-5
  title      String?
  comment    String
  isVerified Boolean @default(false) // Verified purchase
  isApproved Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId]) // One review per user per product
  @@map("reviews")
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId

  @@map("wishlists")
}

model Cart {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  userId   String     @unique @db.ObjectId
  user     User       @relation(fields: [userId], references: [id])
  CartItem CartItem[]

  @@map("carts")
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  slug        String     @unique
  description String?
  image       String?
  parentId    String?    @db.ObjectId
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[] @relation("CategoryHierarchy")
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  slug             String  @unique
  description      String
  shortDescription String?

  // Pricing
  price           Float
  discountedPrice Float?
  costPrice       Float?

  // Inventory
  sku               String  @unique
  stockQuantity     Int     @default(0)
  lowStockThreshold Int     @default(10)
  isActive          Boolean @default(true)
  isFeatured        Boolean @default(false)

  // SEO
  metaTitle       String?
  metaDescription String?

  // Product Details
  material   String?
  care       String[] // Array of care instructions
  features   String[] // Array of features
  dimensions String?
  weight     Float?
  gender     Gender?

  // Relations
  categoryId    String           @db.ObjectId
  category      Category         @relation(fields: [categoryId], references: [id])
  images        ProductImage[]
  variants      ProductVariant[]
  reviews       Review[]
  orderItems    OrderItem[]
  wishlistItems Wishlist[]
  cartItems     CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

enum Gender {
  MEN
  WOMEN
  UNISEX
}

model ProductImage {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  url       String
  alt       String?
  sortOrder Int     @default(0)
  isPrimary Boolean @default(false)

  createdAt DateTime @default(now())

  @@map("product_images")
}

model ProductVariant {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  size     String // S, M, L, XL, etc.
  color    String?
  price    Float? // Override product price if needed
  sku      String  @unique
  stock    Int     @default(0)
  isActive Boolean @default(true)

  // Relations
  orderItems OrderItem[]
  cartItems  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_variants")
}

model OrderItem {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String          @db.ObjectId
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String          @db.ObjectId
  product   Product         @relation(fields: [productId], references: [id])
  variantId String?         @db.ObjectId
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  quantity Int
  price    Float // Price at time of order

  createdAt DateTime @default(now())

  @@map("order_items")
}

model CartItem {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String          @db.ObjectId
  cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String          @db.ObjectId
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId String?         @db.ObjectId
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  quantity Int
  price    Float // Price at time of adding to cart

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}
